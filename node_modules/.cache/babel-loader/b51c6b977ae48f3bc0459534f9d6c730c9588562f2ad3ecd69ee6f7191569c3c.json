{"ast":null,"code":"// client/src/services/apiService.js\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL; // Ensure you have REACT_APP_API_URL in your .env file\nconst API_URL2 = '/api/server'; // Adjust based on your backend API structure\n\nexport const setupServer = async port => {\n  return axios.post(`${API_URL2}/setup`, {\n    port\n  });\n};\nexport const fetchData = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/data`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Could not fetch data\", error);\n    throw error;\n  }\n};\napp.post('/api/server/start', (req, res) => {\n  // Authentication and authorization checks\n  // Logic to start the server\n  res.json({\n    message: \"Server started successfully.\"\n  });\n});\napp.post('/api/server/stop', (req, res) => {\n  // Authentication and authorization checks\n  // Logic to stop the server\n  res.json({\n    message: \"Server stopped successfully.\"\n  });\n});\napp.get('/api/server/status', (req, res) => {\n  // Logic to check the server's status\n  res.json({\n    status: \"Running\",\n    uptime: \"2 hours\"\n  });\n});","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","API_URL2","setupServer","port","post","fetchData","response","get","data","error","console","app","req","res","json","message","status","uptime"],"sources":["C:/Users/Anton/OneDrive/Desktop/ServerClientApp/client/ServerClientApp/src/frontend/services/apiService.js"],"sourcesContent":["// client/src/services/apiService.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL; // Ensure you have REACT_APP_API_URL in your .env file\r\nconst API_URL2 = '/api/server'; // Adjust based on your backend API structure\r\n\r\nexport const setupServer = async (port) => {\r\n    return axios.post(`${API_URL2}/setup`, { port });\r\n};\r\n\r\n\r\nexport const fetchData = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/data`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Could not fetch data\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\napp.post('/api/server/start', (req, res) => {\r\n  // Authentication and authorization checks\r\n  // Logic to start the server\r\n  res.json({ message: \"Server started successfully.\" });\r\n});\r\n\r\napp.post('/api/server/stop', (req, res) => {\r\n  // Authentication and authorization checks\r\n  // Logic to stop the server\r\n  res.json({ message: \"Server stopped successfully.\" });\r\n});\r\n\r\napp.get('/api/server/status', (req, res) => {\r\n  // Logic to check the server's status\r\n  res.json({ status: \"Running\", uptime: \"2 hours\" });\r\n});\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,CAAC,CAAC;AAC/C,MAAMC,QAAQ,GAAG,aAAa,CAAC,CAAC;;AAEhC,OAAO,MAAMC,WAAW,GAAG,MAAOC,IAAI,IAAK;EACvC,OAAOP,KAAK,CAACQ,IAAI,CAAE,GAAEH,QAAS,QAAO,EAAE;IAAEE;EAAK,CAAC,CAAC;AACpD,CAAC;AAGD,OAAO,MAAME,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAE,GAAEV,OAAQ,OAAM,CAAC;IACnD,OAAOS,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;AAIDE,GAAG,CAACP,IAAI,CAAC,mBAAmB,EAAE,CAACQ,GAAG,EAAEC,GAAG,KAAK;EAC1C;EACA;EACAA,GAAG,CAACC,IAAI,CAAC;IAAEC,OAAO,EAAE;EAA+B,CAAC,CAAC;AACvD,CAAC,CAAC;AAEFJ,GAAG,CAACP,IAAI,CAAC,kBAAkB,EAAE,CAACQ,GAAG,EAAEC,GAAG,KAAK;EACzC;EACA;EACAA,GAAG,CAACC,IAAI,CAAC;IAAEC,OAAO,EAAE;EAA+B,CAAC,CAAC;AACvD,CAAC,CAAC;AAEFJ,GAAG,CAACJ,GAAG,CAAC,oBAAoB,EAAE,CAACK,GAAG,EAAEC,GAAG,KAAK;EAC1C;EACAA,GAAG,CAACC,IAAI,CAAC;IAAEE,MAAM,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAU,CAAC,CAAC;AACpD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}