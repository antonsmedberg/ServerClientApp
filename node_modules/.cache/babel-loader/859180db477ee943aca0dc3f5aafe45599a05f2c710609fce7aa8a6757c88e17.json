{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anton\\\\OneDrive\\\\Desktop\\\\ServerClientApp\\\\client\\\\ServerClientApp\\\\src\\\\frontend\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// client/src/context/AuthContext.js\nimport React, { createContext, useContext, useState } from 'react';\nimport { mockLogin } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const login = async credentials => {\n    try {\n      const response = await mockLogin(credentials);\n      if (response.token) {\n        setIsAuthenticated(true); // Update authentication state\n      }\n    } catch (error) {\n      setIsAuthenticated(false);\n      throw error;\n    }\n  };\n  const logout = () => {\n    setIsAuthenticated(false); // Simply update state for mock; clear tokens/storage in real app\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"BT2f1XiqCgFHwobQTWR7kond0Ig=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","mockLogin","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","login","credentials","response","token","error","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Anton/OneDrive/Desktop/ServerClientApp/client/ServerClientApp/src/frontend/context/AuthContext.js"],"sourcesContent":["// client/src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState } from 'react';\r\nimport { mockLogin } from '../services/authService';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      const response = await mockLogin(credentials);\r\n      if (response.token) {\r\n        setIsAuthenticated(true); // Update authentication state\r\n      }\r\n    } catch (error) {\r\n      setIsAuthenticated(false);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setIsAuthenticated(false); // Simply update state for mock; clear tokens/storage in real app\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, login }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,SAAS,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAMU,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,SAAS,CAACU,WAAW,CAAC;MAC7C,IAAIC,QAAQ,CAACC,KAAK,EAAE;QAClBJ,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC5B;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdL,kBAAkB,CAAC,KAAK,CAAC;MACzB,MAAMK,KAAK;IACb;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBN,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7B,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAET,eAAe;MAAEE;IAAM,CAAE;IAAAJ,QAAA,EACrDA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACd,EAAA,CAxBWF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}